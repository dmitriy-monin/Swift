//Lesson 17. Subscipts

/*
 Шахматная доска
 создать тип шахматная доска
 при обращении к ячейка возвращать значение белый цвет или черный цвет
 сделать энум белый и черный
 должен быть только геттер
 если выбрать цифру или букву за диапазоном возвращать nil
*/

enum Color: String {
    case black = "Black"
    case white = "White"
}

struct ChessDesk {
    subscript(row: String, column: Int) -> String? {
        var row = row.uppercased()
        
        let row1: [Character] = ["A", "B", "C", "D", "E", "F", "G", "H"]
        
        var vert = 0
        switch row {
        case "A" : vert = 1
        case "B" : vert = 2
        case "C" : vert = 3
        case "D" : vert = 4
        case "E" : vert = 5
        case "F" : vert = 6
        case "G" : vert = 7
        case "H" : vert = 8
        default:
            0
        }
        
        if row1.contains(row) && column > 0 && column < 9 {
            return (vert + column) % 2 == 0 ? Color.black.rawValue : Color.white.rawValue
        }
        return nil
    }
}

ChessDesk()["A", 1]


/*
 Крестики-нолики
  
  1. Создать тип, представляющий собой поле для игры в крестики нолики
  На каждой клетке может быть только одно из значений: Пусто, Крестик, Нолик
  Добавьте возможность красиво распечатывать поле

  2. Добавьте сабскрипт, который устанавливает значение клетки по ряду и столбцу,
  причем вы должны следить за тем, чтобы программа не падала если будет введен не существующий ряд или столбец.

  3. Также следите за тем, чтобы нельзя было устанавливать крестик либо нолик туда, где они уже что-то есть. Добавьте метод очистки поля.

  4. Если хотите, добавте алгоритм, который вычислит победителя
 */

